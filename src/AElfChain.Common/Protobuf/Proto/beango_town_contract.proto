/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/AElf.Contracts.BeangoTownContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/AElf.Contracts.BeangoTownContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "acs12.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "Contracts.BeangoTownContract";

// the contract definition: a gRPC service definition.
service BeangoTownContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "Contracts.BeangoTownContract.BeangoTownContractState";
    option (aelf.base) = "acs12.proto";
    // an action defined as a gRPC service method.
    // this action take a google.protobuf.Empty (placeholder for void) as input
    // and returns a custom defined type: HelloReturn.
    rpc Play (PlayInput) returns (PlayOutput) {
    }
    rpc Bingo (aelf.Hash) returns (google.protobuf.Empty) {
    }

    rpc SetGameLimitSettings (GameLimitSettings) returns (google.protobuf.Empty) {
    }
    rpc Initialize (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc ChangeAdmin (aelf.Address) returns (google.protobuf.Empty) {
    }
    rpc SetGameRules (GameRules) returns (google.protobuf.Empty) {
    }


    // Views
    rpc CheckBeanPass (aelf.Address) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc GetPlayerInformation (aelf.Address) returns (PlayerInformation) {
        option (aelf.is_view) = true;
    }

    rpc GetBoutInformation (GetBoutInformationInput) returns (BoutInformation) {
        option (aelf.is_view) = true;
    }

    rpc GetAdmin (google.protobuf.Empty) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }

    rpc GetGameLimitSettings (google.protobuf.Empty) returns (GameLimitSettings) {
        option (aelf.is_view) = true;
    }

    rpc GetGameRules (google.protobuf.Empty) returns (GameRules) {
        option (aelf.is_view) = true;
    }


}

message PlayInput {
    bool reset_start = 1;
    int32 dice_count = 2;
    bool execute_bingo = 3;
    string memo = 4;
}
message PlayOutput {
    int64 expected_block_height = 1;
}

message GetBoutInformationInput {
    aelf.Hash play_id = 1;
}

message PlayerInformation {
    aelf.Address player_address = 1;
    int32 playable_count =2;
    google.protobuf.Timestamp last_play_time = 3;
    int64 sum_score = 4;
    int32 cur_grid_num = 5;
}


message BoutInformation {
    int64 play_block_height = 1;
    GridType grid_type = 2;
    int32 grid_num = 3;
    int32 score = 4;
    bool is_complete = 5;
    aelf.Hash play_id = 6;
    int64 bingo_block_height = 7;
    google.protobuf.Timestamp play_time = 8;
    aelf.Address player_address = 9;
    int64 expected_block_height = 10;
    int32 dice_count = 11;
    repeated int32 dice_numbers = 12;
    int32 start_grid_num = 13;
    int32 end_grid_num = 14;
}

message GameLimitSettings {
    int32 daily_max_play_count = 1;
    int32 daily_play_count_reset_hours = 2;
}


message GameRules {
    google.protobuf.Timestamp begin_time = 1;
    google.protobuf.Timestamp end_time = 2;
    int32 min_score = 3;
    int32 max_score = 4;
}


enum GridType {
    Blue = 0;
    Red = 1;
    Gold = 2;
}

message GridTypeList {
    // The gridType list.
    repeated GridType value = 1;
}
message DiceList {
    repeated int32 value = 1;
}

// LogEvent

message Played {
    option (aelf.is_event) = true;
    int64 play_block_height = 1;
    aelf.Hash play_id = 2;
    aelf.Address player_address = 3;
}
message Bingoed {
    option (aelf.is_event) = true;
    int64 play_block_height = 1;
    GridType grid_type = 2;
    int32 grid_num = 3;
    int64 score = 4;
    bool is_complete = 5;
    aelf.Hash play_id = 6;
    int64 bingo_block_height = 7;
    aelf.Address player_address = 8;
    int32 dice_count = 9;
    DiceList dice_numbers = 10;
    int32 start_grid_num = 11;
    int32 end_grid_num = 12;
}


